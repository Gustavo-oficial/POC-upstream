name: Sincronizar repositórios

on:
  push:
    branches:
      - main

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório de origem
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Criando repositório no cliente se não existir
        env:
          GH_TOKEN: ${{ secrets.CLIENT_REPO_TOKEN }}
          ORG_NAME:  ${{ secrets.CLIENT_ORG_NAME }}         
          TARGET_REPO: ${{ secrets.REPO_NAME }}   
        run: |
          echo "Verificando se ${ORG_NAME}/${TARGET_REPO} existe..."
          if gh repo view "${ORG_NAME}/${TARGET_REPO}" >/dev/null 2>&1; then
            echo "✅ Repositório já existe."
          else
            echo "⚡ Criando repositório ${ORG_NAME}/${TARGET_REPO}..."
            yes "" | gh repo create "${ORG_NAME}/${TARGET_REPO}" \
              --private \
              --description "Repositório sincronizado automaticamente"
          fi

      - name: Sincronizando repositórios
        env:
          CLIENT_REPO_TOKEN: ${{ secrets.CLIENT_REPO_TOKEN }}
          ORIGINAL_REPO_NAME: ${{ secrets.REPO_NAME }} 
          ORG_NAME:  ${{ secrets.MY_ORG_NAME }}
          TARGET_ORG: ${{ secrets.CLIENT_ORG_NAME }}           
        run: |
          # Configurar usuário git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Diretório seguro dentro do workspace
          CLONE_DIR="$GITHUB_WORKSPACE/repo"
          mkdir -p "$CLONE_DIR"
          cd "$CLONE_DIR"

          # Garantir que o nome da pasta do clone é apenas o nome do repositório
          REPO_FOLDER="${ORIGINAL_REPO_NAME}"
          
          echo "Clonando repositório do cliente em $CLONE_DIR/$REPO_FOLDER ..."
          git clone "https://x-access-token:$CLIENT_REPO_TOKEN@github.com/${TARGET_ORG}/${ORIGINAL_REPO_NAME}.git" "$REPO_FOLDER"
          
          cd "$REPO_FOLDER"

          # Adicionar remote do repositório original
          git remote add origin_repo "https://x-access-token:$CLIENT_REPO_TOKEN@github.com/${ORG_NAME}/${ORIGINAL_REPO_NAME}.git"

          # Buscar e mesclar alterações da origem
          git fetch origin_repo main
          git merge origin_repo/main --allow-unrelated-histories -m "Merge automático"

          # Enviar para o cliente
          git push origin main
